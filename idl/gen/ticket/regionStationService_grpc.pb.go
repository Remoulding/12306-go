// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: ticket/regionStationService.proto

package ticket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RegionStationService_ListRegionStation_FullMethodName = "/ticket.RegionStationService/ListRegionStation"
	RegionStationService_ListAllStation_FullMethodName    = "/ticket.RegionStationService/ListAllStation"
)

// RegionStationServiceClient is the client API for RegionStationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义服务
type RegionStationServiceClient interface {
	// 查询车站&城市站点集合信息
	ListRegionStation(ctx context.Context, in *RegionStationQueryReq, opts ...grpc.CallOption) (*ListRegionStationResponse, error)
	// 查询所有站点集合信息
	ListAllStation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAllStationResponse, error)
}

type regionStationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionStationServiceClient(cc grpc.ClientConnInterface) RegionStationServiceClient {
	return &regionStationServiceClient{cc}
}

func (c *regionStationServiceClient) ListRegionStation(ctx context.Context, in *RegionStationQueryReq, opts ...grpc.CallOption) (*ListRegionStationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRegionStationResponse)
	err := c.cc.Invoke(ctx, RegionStationService_ListRegionStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionStationServiceClient) ListAllStation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAllStationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllStationResponse)
	err := c.cc.Invoke(ctx, RegionStationService_ListAllStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionStationServiceServer is the server API for RegionStationService service.
// All implementations must embed UnimplementedRegionStationServiceServer
// for forward compatibility.
//
// 定义服务
type RegionStationServiceServer interface {
	// 查询车站&城市站点集合信息
	ListRegionStation(context.Context, *RegionStationQueryReq) (*ListRegionStationResponse, error)
	// 查询所有站点集合信息
	ListAllStation(context.Context, *emptypb.Empty) (*ListAllStationResponse, error)
	mustEmbedUnimplementedRegionStationServiceServer()
}

// UnimplementedRegionStationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegionStationServiceServer struct{}

func (UnimplementedRegionStationServiceServer) ListRegionStation(context.Context, *RegionStationQueryReq) (*ListRegionStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegionStation not implemented")
}
func (UnimplementedRegionStationServiceServer) ListAllStation(context.Context, *emptypb.Empty) (*ListAllStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllStation not implemented")
}
func (UnimplementedRegionStationServiceServer) mustEmbedUnimplementedRegionStationServiceServer() {}
func (UnimplementedRegionStationServiceServer) testEmbeddedByValue()                              {}

// UnsafeRegionStationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegionStationServiceServer will
// result in compilation errors.
type UnsafeRegionStationServiceServer interface {
	mustEmbedUnimplementedRegionStationServiceServer()
}

func RegisterRegionStationServiceServer(s grpc.ServiceRegistrar, srv RegionStationServiceServer) {
	// If the following call pancis, it indicates UnimplementedRegionStationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegionStationService_ServiceDesc, srv)
}

func _RegionStationService_ListRegionStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionStationQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionStationServiceServer).ListRegionStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegionStationService_ListRegionStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionStationServiceServer).ListRegionStation(ctx, req.(*RegionStationQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionStationService_ListAllStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionStationServiceServer).ListAllStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegionStationService_ListAllStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionStationServiceServer).ListAllStation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RegionStationService_ServiceDesc is the grpc.ServiceDesc for RegionStationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegionStationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.RegionStationService",
	HandlerType: (*RegionStationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRegionStation",
			Handler:    _RegionStationService_ListRegionStation_Handler,
		},
		{
			MethodName: "ListAllStation",
			Handler:    _RegionStationService_ListAllStation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket/regionStationService.proto",
}
