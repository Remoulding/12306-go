// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: ticket/ticket_service.proto

package ticket_service

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListRegionStationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryType int32  `protobuf:"varint,1,opt,name=queryType,proto3" json:"queryType,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListRegionStationRequest) Reset() {
	*x = ListRegionStationRequest{}
	mi := &file_ticket_ticket_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegionStationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionStationRequest) ProtoMessage() {}

func (x *ListRegionStationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionStationRequest.ProtoReflect.Descriptor instead.
func (*ListRegionStationRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListRegionStationRequest) GetQueryType() int32 {
	if x != nil {
		return x.QueryType
	}
	return 0
}

func (x *ListRegionStationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 返回车站&城市站点集合的响应
type ListRegionStationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*RegionStation `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListRegionStationResponse) Reset() {
	*x = ListRegionStationResponse{}
	mi := &file_ticket_ticket_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegionStationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionStationResponse) ProtoMessage() {}

func (x *ListRegionStationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionStationResponse.ProtoReflect.Descriptor instead.
func (*ListRegionStationResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListRegionStationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListRegionStationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListRegionStationResponse) GetData() []*RegionStation {
	if x != nil {
		return x.Data
	}
	return nil
}

type RegionStation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Spell string `protobuf:"bytes,3,opt,name=spell,proto3" json:"spell,omitempty"`
}

func (x *RegionStation) Reset() {
	*x = RegionStation{}
	mi := &file_ticket_ticket_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionStation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionStation) ProtoMessage() {}

func (x *RegionStation) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionStation.ProtoReflect.Descriptor instead.
func (*RegionStation) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{2}
}

func (x *RegionStation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegionStation) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RegionStation) GetSpell() string {
	if x != nil {
		return x.Spell
	}
	return ""
}

// 返回所有站点集合的响应
type ListAllStationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Station `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListAllStationResponse) Reset() {
	*x = ListAllStationResponse{}
	mi := &file_ticket_ticket_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAllStationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllStationResponse) ProtoMessage() {}

func (x *ListAllStationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllStationResponse.ProtoReflect.Descriptor instead.
func (*ListAllStationResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListAllStationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListAllStationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListAllStationResponse) GetData() []*Station {
	if x != nil {
		return x.Data
	}
	return nil
}

// 返回所有站点信息
type Station struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code       string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Spell      string `protobuf:"bytes,3,opt,name=spell,proto3" json:"spell,omitempty"`
	RegionName string `protobuf:"bytes,4,opt,name=regionName,proto3" json:"regionName,omitempty"`
}

func (x *Station) Reset() {
	*x = Station{}
	mi := &file_ticket_ticket_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Station) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Station) ProtoMessage() {}

func (x *Station) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Station.ProtoReflect.Descriptor instead.
func (*Station) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{4}
}

func (x *Station) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Station) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Station) GetSpell() string {
	if x != nil {
		return x.Spell
	}
	return ""
}

func (x *Station) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

type TrainStationQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrainId string `protobuf:"bytes,1,opt,name=trainId,proto3" json:"trainId,omitempty"`
}

func (x *TrainStationQueryRequest) Reset() {
	*x = TrainStationQueryRequest{}
	mi := &file_ticket_ticket_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainStationQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainStationQueryRequest) ProtoMessage() {}

func (x *TrainStationQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainStationQueryRequest.ProtoReflect.Descriptor instead.
func (*TrainStationQueryRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{5}
}

func (x *TrainStationQueryRequest) GetTrainId() string {
	if x != nil {
		return x.TrainId
	}
	return ""
}

type TrainStationQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*TrainStation `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TrainStationQueryResponse) Reset() {
	*x = TrainStationQueryResponse{}
	mi := &file_ticket_ticket_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainStationQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainStationQueryResponse) ProtoMessage() {}

func (x *TrainStationQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainStationQueryResponse.ProtoReflect.Descriptor instead.
func (*TrainStationQueryResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{6}
}

func (x *TrainStationQueryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TrainStationQueryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrainStationQueryResponse) GetData() []*TrainStation {
	if x != nil {
		return x.Data
	}
	return nil
}

type TrainStation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence      string `protobuf:"bytes,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Departure     string `protobuf:"bytes,2,opt,name=departure,proto3" json:"departure,omitempty"`
	ArrivalTime   string `protobuf:"bytes,3,opt,name=arrivalTime,proto3" json:"arrivalTime,omitempty"`
	DepartureTime string `protobuf:"bytes,4,opt,name=departureTime,proto3" json:"departureTime,omitempty"`
	StopoverTime  int32  `protobuf:"varint,5,opt,name=stopoverTime,proto3" json:"stopoverTime,omitempty"`
}

func (x *TrainStation) Reset() {
	*x = TrainStation{}
	mi := &file_ticket_ticket_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainStation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainStation) ProtoMessage() {}

func (x *TrainStation) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainStation.ProtoReflect.Descriptor instead.
func (*TrainStation) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{7}
}

func (x *TrainStation) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

func (x *TrainStation) GetDeparture() string {
	if x != nil {
		return x.Departure
	}
	return ""
}

func (x *TrainStation) GetArrivalTime() string {
	if x != nil {
		return x.ArrivalTime
	}
	return ""
}

func (x *TrainStation) GetDepartureTime() string {
	if x != nil {
		return x.DepartureTime
	}
	return ""
}

func (x *TrainStation) GetStopoverTime() int32 {
	if x != nil {
		return x.StopoverTime
	}
	return 0
}

type TicketPageQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromStation   string `protobuf:"bytes,1,opt,name=fromStation,proto3" json:"fromStation,omitempty"`
	ToStation     string `protobuf:"bytes,2,opt,name=toStation,proto3" json:"toStation,omitempty"`
	DepartureDate string `protobuf:"bytes,3,opt,name=departureDate,proto3" json:"departureDate,omitempty"`
	Departure     string `protobuf:"bytes,4,opt,name=departure,proto3" json:"departure,omitempty"`
	Arrival       string `protobuf:"bytes,5,opt,name=arrival,proto3" json:"arrival,omitempty"`
}

func (x *TicketPageQueryRequest) Reset() {
	*x = TicketPageQueryRequest{}
	mi := &file_ticket_ticket_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketPageQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketPageQueryRequest) ProtoMessage() {}

func (x *TicketPageQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketPageQueryRequest.ProtoReflect.Descriptor instead.
func (*TicketPageQueryRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{8}
}

func (x *TicketPageQueryRequest) GetFromStation() string {
	if x != nil {
		return x.FromStation
	}
	return ""
}

func (x *TicketPageQueryRequest) GetToStation() string {
	if x != nil {
		return x.ToStation
	}
	return ""
}

func (x *TicketPageQueryRequest) GetDepartureDate() string {
	if x != nil {
		return x.DepartureDate
	}
	return ""
}

func (x *TicketPageQueryRequest) GetDeparture() string {
	if x != nil {
		return x.Departure
	}
	return ""
}

func (x *TicketPageQueryRequest) GetArrival() string {
	if x != nil {
		return x.Arrival
	}
	return ""
}

type TicketPageQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *TicketPageQueryData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TicketPageQueryResponse) Reset() {
	*x = TicketPageQueryResponse{}
	mi := &file_ticket_ticket_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketPageQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketPageQueryResponse) ProtoMessage() {}

func (x *TicketPageQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketPageQueryResponse.ProtoReflect.Descriptor instead.
func (*TicketPageQueryResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{9}
}

func (x *TicketPageQueryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TicketPageQueryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TicketPageQueryResponse) GetData() *TicketPageQueryData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TicketPageQueryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrainList            []*TicketInfo `protobuf:"bytes,1,rep,name=trainList,proto3" json:"trainList,omitempty"`
	TrainBrandList       []int32       `protobuf:"varint,2,rep,packed,name=trainBrandList,proto3" json:"trainBrandList,omitempty"`
	DepartureStationList []string      `protobuf:"bytes,3,rep,name=departureStationList,proto3" json:"departureStationList,omitempty"`
	ArrivalStationList   []string      `protobuf:"bytes,4,rep,name=arrivalStationList,proto3" json:"arrivalStationList,omitempty"`
	SeatClassTypeList    []int32       `protobuf:"varint,5,rep,packed,name=seatClassTypeList,proto3" json:"seatClassTypeList,omitempty"`
}

func (x *TicketPageQueryData) Reset() {
	*x = TicketPageQueryData{}
	mi := &file_ticket_ticket_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketPageQueryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketPageQueryData) ProtoMessage() {}

func (x *TicketPageQueryData) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketPageQueryData.ProtoReflect.Descriptor instead.
func (*TicketPageQueryData) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{10}
}

func (x *TicketPageQueryData) GetTrainList() []*TicketInfo {
	if x != nil {
		return x.TrainList
	}
	return nil
}

func (x *TicketPageQueryData) GetTrainBrandList() []int32 {
	if x != nil {
		return x.TrainBrandList
	}
	return nil
}

func (x *TicketPageQueryData) GetDepartureStationList() []string {
	if x != nil {
		return x.DepartureStationList
	}
	return nil
}

func (x *TicketPageQueryData) GetArrivalStationList() []string {
	if x != nil {
		return x.ArrivalStationList
	}
	return nil
}

func (x *TicketPageQueryData) GetSeatClassTypeList() []int32 {
	if x != nil {
		return x.SeatClassTypeList
	}
	return nil
}

type TicketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrainId       string           `protobuf:"bytes,1,opt,name=trainId,proto3" json:"trainId,omitempty"`
	TrainNumber   string           `protobuf:"bytes,2,opt,name=trainNumber,proto3" json:"trainNumber,omitempty"`
	DepartureTime string           `protobuf:"bytes,3,opt,name=departureTime,proto3" json:"departureTime,omitempty"`
	ArrivalTime   string           `protobuf:"bytes,4,opt,name=arrivalTime,proto3" json:"arrivalTime,omitempty"`
	Duration      string           `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	DaysArrived   int32            `protobuf:"varint,6,opt,name=daysArrived,proto3" json:"daysArrived,omitempty"`
	Departure     string           `protobuf:"bytes,7,opt,name=departure,proto3" json:"departure,omitempty"`
	Arrival       string           `protobuf:"bytes,8,opt,name=arrival,proto3" json:"arrival,omitempty"`
	DepartureFlag bool             `protobuf:"varint,9,opt,name=departureFlag,proto3" json:"departureFlag,omitempty"`
	ArrivalFlag   bool             `protobuf:"varint,10,opt,name=arrivalFlag,proto3" json:"arrivalFlag,omitempty"`
	TrainType     int32            `protobuf:"varint,11,opt,name=trainType,proto3" json:"trainType,omitempty"`
	SaleTime      string           `protobuf:"bytes,12,opt,name=saleTime,proto3" json:"saleTime,omitempty"`
	SaleStatus    int32            `protobuf:"varint,13,opt,name=saleStatus,proto3" json:"saleStatus,omitempty"`
	TrainTags     []string         `protobuf:"bytes,14,rep,name=trainTags,proto3" json:"trainTags,omitempty"`
	TrainBrand    string           `protobuf:"bytes,15,opt,name=trainBrand,proto3" json:"trainBrand,omitempty"`
	SeatClassList []*SeatClassInfo `protobuf:"bytes,16,rep,name=seatClassList,proto3" json:"seatClassList,omitempty"`
}

func (x *TicketInfo) Reset() {
	*x = TicketInfo{}
	mi := &file_ticket_ticket_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketInfo) ProtoMessage() {}

func (x *TicketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketInfo.ProtoReflect.Descriptor instead.
func (*TicketInfo) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{11}
}

func (x *TicketInfo) GetTrainId() string {
	if x != nil {
		return x.TrainId
	}
	return ""
}

func (x *TicketInfo) GetTrainNumber() string {
	if x != nil {
		return x.TrainNumber
	}
	return ""
}

func (x *TicketInfo) GetDepartureTime() string {
	if x != nil {
		return x.DepartureTime
	}
	return ""
}

func (x *TicketInfo) GetArrivalTime() string {
	if x != nil {
		return x.ArrivalTime
	}
	return ""
}

func (x *TicketInfo) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *TicketInfo) GetDaysArrived() int32 {
	if x != nil {
		return x.DaysArrived
	}
	return 0
}

func (x *TicketInfo) GetDeparture() string {
	if x != nil {
		return x.Departure
	}
	return ""
}

func (x *TicketInfo) GetArrival() string {
	if x != nil {
		return x.Arrival
	}
	return ""
}

func (x *TicketInfo) GetDepartureFlag() bool {
	if x != nil {
		return x.DepartureFlag
	}
	return false
}

func (x *TicketInfo) GetArrivalFlag() bool {
	if x != nil {
		return x.ArrivalFlag
	}
	return false
}

func (x *TicketInfo) GetTrainType() int32 {
	if x != nil {
		return x.TrainType
	}
	return 0
}

func (x *TicketInfo) GetSaleTime() string {
	if x != nil {
		return x.SaleTime
	}
	return ""
}

func (x *TicketInfo) GetSaleStatus() int32 {
	if x != nil {
		return x.SaleStatus
	}
	return 0
}

func (x *TicketInfo) GetTrainTags() []string {
	if x != nil {
		return x.TrainTags
	}
	return nil
}

func (x *TicketInfo) GetTrainBrand() string {
	if x != nil {
		return x.TrainBrand
	}
	return ""
}

func (x *TicketInfo) GetSeatClassList() []*SeatClassInfo {
	if x != nil {
		return x.SeatClassList
	}
	return nil
}

type SeatClassInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      int32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Quantity  int32   `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price     float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	Candidate bool    `protobuf:"varint,4,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (x *SeatClassInfo) Reset() {
	*x = SeatClassInfo{}
	mi := &file_ticket_ticket_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeatClassInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatClassInfo) ProtoMessage() {}

func (x *SeatClassInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatClassInfo.ProtoReflect.Descriptor instead.
func (*SeatClassInfo) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{12}
}

func (x *SeatClassInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SeatClassInfo) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SeatClassInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SeatClassInfo) GetCandidate() bool {
	if x != nil {
		return x.Candidate
	}
	return false
}

type CancelTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketID string `protobuf:"bytes,1,opt,name=ticketID,proto3" json:"ticketID,omitempty"`
}

func (x *CancelTicketRequest) Reset() {
	*x = CancelTicketRequest{}
	mi := &file_ticket_ticket_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTicketRequest) ProtoMessage() {}

func (x *CancelTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTicketRequest.ProtoReflect.Descriptor instead.
func (*CancelTicketRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{13}
}

func (x *CancelTicketRequest) GetTicketID() string {
	if x != nil {
		return x.TicketID
	}
	return ""
}

type CancelTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CancelTicketResponse) Reset() {
	*x = CancelTicketResponse{}
	mi := &file_ticket_ticket_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTicketResponse) ProtoMessage() {}

func (x *CancelTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTicketResponse.ProtoReflect.Descriptor instead.
func (*CancelTicketResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{14}
}

func (x *CancelTicketResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CancelTicketResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PurchaseTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrainId       string                         `protobuf:"bytes,1,opt,name=trainId,proto3" json:"trainId,omitempty"`
	Passengers    []*PurchaseTicketPassengerInfo `protobuf:"bytes,2,rep,name=passengers,proto3" json:"passengers,omitempty"`
	ChooseSeats   []string                       `protobuf:"bytes,3,rep,name=chooseSeats,proto3" json:"chooseSeats,omitempty"`
	Departure     string                         `protobuf:"bytes,4,opt,name=departure,proto3" json:"departure,omitempty"`
	Arrival       string                         `protobuf:"bytes,5,opt,name=arrival,proto3" json:"arrival,omitempty"`
	DepartureDate string                         `protobuf:"bytes,6,opt,name=departureDate,proto3" json:"departureDate,omitempty"`
	Username      string                         `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *PurchaseTicketRequest) Reset() {
	*x = PurchaseTicketRequest{}
	mi := &file_ticket_ticket_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurchaseTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseTicketRequest) ProtoMessage() {}

func (x *PurchaseTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseTicketRequest.ProtoReflect.Descriptor instead.
func (*PurchaseTicketRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{15}
}

func (x *PurchaseTicketRequest) GetTrainId() string {
	if x != nil {
		return x.TrainId
	}
	return ""
}

func (x *PurchaseTicketRequest) GetPassengers() []*PurchaseTicketPassengerInfo {
	if x != nil {
		return x.Passengers
	}
	return nil
}

func (x *PurchaseTicketRequest) GetChooseSeats() []string {
	if x != nil {
		return x.ChooseSeats
	}
	return nil
}

func (x *PurchaseTicketRequest) GetDeparture() string {
	if x != nil {
		return x.Departure
	}
	return ""
}

func (x *PurchaseTicketRequest) GetArrival() string {
	if x != nil {
		return x.Arrival
	}
	return ""
}

func (x *PurchaseTicketRequest) GetDepartureDate() string {
	if x != nil {
		return x.DepartureDate
	}
	return ""
}

func (x *PurchaseTicketRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type PurchaseTicketPassengerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassengerId string `protobuf:"bytes,1,opt,name=passengerId,proto3" json:"passengerId,omitempty"`
	SeatType    int32  `protobuf:"varint,2,opt,name=seatType,proto3" json:"seatType,omitempty"`
}

func (x *PurchaseTicketPassengerInfo) Reset() {
	*x = PurchaseTicketPassengerInfo{}
	mi := &file_ticket_ticket_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurchaseTicketPassengerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseTicketPassengerInfo) ProtoMessage() {}

func (x *PurchaseTicketPassengerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseTicketPassengerInfo.ProtoReflect.Descriptor instead.
func (*PurchaseTicketPassengerInfo) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{16}
}

func (x *PurchaseTicketPassengerInfo) GetPassengerId() string {
	if x != nil {
		return x.PassengerId
	}
	return ""
}

func (x *PurchaseTicketPassengerInfo) GetSeatType() int32 {
	if x != nil {
		return x.SeatType
	}
	return 0
}

type PurchaseTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *TicketPurchaseData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PurchaseTicketResponse) Reset() {
	*x = PurchaseTicketResponse{}
	mi := &file_ticket_ticket_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurchaseTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseTicketResponse) ProtoMessage() {}

func (x *PurchaseTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseTicketResponse.ProtoReflect.Descriptor instead.
func (*PurchaseTicketResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{17}
}

func (x *PurchaseTicketResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PurchaseTicketResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PurchaseTicketResponse) GetData() *TicketPurchaseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TicketPurchaseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderSn            string               `protobuf:"bytes,1,opt,name=orderSn,proto3" json:"orderSn,omitempty"`
	TicketOrderDetails []*TicketOrderDetail `protobuf:"bytes,2,rep,name=ticketOrderDetails,proto3" json:"ticketOrderDetails,omitempty"`
}

func (x *TicketPurchaseData) Reset() {
	*x = TicketPurchaseData{}
	mi := &file_ticket_ticket_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketPurchaseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketPurchaseData) ProtoMessage() {}

func (x *TicketPurchaseData) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketPurchaseData.ProtoReflect.Descriptor instead.
func (*TicketPurchaseData) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{18}
}

func (x *TicketPurchaseData) GetOrderSn() string {
	if x != nil {
		return x.OrderSn
	}
	return ""
}

func (x *TicketPurchaseData) GetTicketOrderDetails() []*TicketOrderDetail {
	if x != nil {
		return x.TicketOrderDetails
	}
	return nil
}

type TicketOrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatType       int32  `protobuf:"varint,1,opt,name=seatType,proto3" json:"seatType,omitempty"`
	CarriageNumber string `protobuf:"bytes,2,opt,name=carriageNumber,proto3" json:"carriageNumber,omitempty"`
	SeatNumber     string `protobuf:"bytes,3,opt,name=seatNumber,proto3" json:"seatNumber,omitempty"`
	RealName       string `protobuf:"bytes,4,opt,name=realName,proto3" json:"realName,omitempty"`
	IdType         int32  `protobuf:"varint,5,opt,name=idType,proto3" json:"idType,omitempty"`
	IdCard         string `protobuf:"bytes,6,opt,name=idCard,proto3" json:"idCard,omitempty"`
	TicketType     int32  `protobuf:"varint,7,opt,name=ticketType,proto3" json:"ticketType,omitempty"` // 车票类型 0：成人 1：儿童 2：学生
	Amount         int32  `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TicketOrderDetail) Reset() {
	*x = TicketOrderDetail{}
	mi := &file_ticket_ticket_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketOrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketOrderDetail) ProtoMessage() {}

func (x *TicketOrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketOrderDetail.ProtoReflect.Descriptor instead.
func (*TicketOrderDetail) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{19}
}

func (x *TicketOrderDetail) GetSeatType() int32 {
	if x != nil {
		return x.SeatType
	}
	return 0
}

func (x *TicketOrderDetail) GetCarriageNumber() string {
	if x != nil {
		return x.CarriageNumber
	}
	return ""
}

func (x *TicketOrderDetail) GetSeatNumber() string {
	if x != nil {
		return x.SeatNumber
	}
	return ""
}

func (x *TicketOrderDetail) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *TicketOrderDetail) GetIdType() int32 {
	if x != nil {
		return x.IdType
	}
	return 0
}

func (x *TicketOrderDetail) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *TicketOrderDetail) GetTicketType() int32 {
	if x != nil {
		return x.TicketType
	}
	return 0
}

func (x *TicketOrderDetail) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type GetTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *GetTicketRequest) Reset() {
	*x = GetTicketRequest{}
	mi := &file_ticket_ticket_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketRequest) ProtoMessage() {}

func (x *GetTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketRequest.ProtoReflect.Descriptor instead.
func (*GetTicketRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{20}
}

func (x *GetTicketRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GetTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*MyTicketInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTicketResponse) Reset() {
	*x = GetTicketResponse{}
	mi := &file_ticket_ticket_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketResponse) ProtoMessage() {}

func (x *GetTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketResponse.ProtoReflect.Descriptor instead.
func (*GetTicketResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetTicketResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetTicketResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTicketResponse) GetData() []*MyTicketInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type MyTicketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TrainNumber    string `protobuf:"bytes,2,opt,name=trainNumber,proto3" json:"trainNumber,omitempty"`
	DepartureTime  string `protobuf:"bytes,3,opt,name=departureTime,proto3" json:"departureTime,omitempty"`
	ArrivalTime    string `protobuf:"bytes,4,opt,name=arrivalTime,proto3" json:"arrivalTime,omitempty"`
	Departure      string `protobuf:"bytes,7,opt,name=departure,proto3" json:"departure,omitempty"`
	Arrival        string `protobuf:"bytes,8,opt,name=arrival,proto3" json:"arrival,omitempty"`
	PassengerName  string `protobuf:"bytes,9,opt,name=passengerName,proto3" json:"passengerName,omitempty"`
	IdCard         string `protobuf:"bytes,10,opt,name=idCard,proto3" json:"idCard,omitempty"`
	TicketStatus   int32  `protobuf:"varint,11,opt,name=ticketStatus,proto3" json:"ticketStatus,omitempty"`
	CarriageNumber string `protobuf:"bytes,12,opt,name=carriageNumber,proto3" json:"carriageNumber,omitempty"`
	SeatNumber     string `protobuf:"bytes,13,opt,name=seatNumber,proto3" json:"seatNumber,omitempty"`
}

func (x *MyTicketInfo) Reset() {
	*x = MyTicketInfo{}
	mi := &file_ticket_ticket_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MyTicketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyTicketInfo) ProtoMessage() {}

func (x *MyTicketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyTicketInfo.ProtoReflect.Descriptor instead.
func (*MyTicketInfo) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_service_proto_rawDescGZIP(), []int{22}
}

func (x *MyTicketInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MyTicketInfo) GetTrainNumber() string {
	if x != nil {
		return x.TrainNumber
	}
	return ""
}

func (x *MyTicketInfo) GetDepartureTime() string {
	if x != nil {
		return x.DepartureTime
	}
	return ""
}

func (x *MyTicketInfo) GetArrivalTime() string {
	if x != nil {
		return x.ArrivalTime
	}
	return ""
}

func (x *MyTicketInfo) GetDeparture() string {
	if x != nil {
		return x.Departure
	}
	return ""
}

func (x *MyTicketInfo) GetArrival() string {
	if x != nil {
		return x.Arrival
	}
	return ""
}

func (x *MyTicketInfo) GetPassengerName() string {
	if x != nil {
		return x.PassengerName
	}
	return ""
}

func (x *MyTicketInfo) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *MyTicketInfo) GetTicketStatus() int32 {
	if x != nil {
		return x.TicketStatus
	}
	return 0
}

func (x *MyTicketInfo) GetCarriageNumber() string {
	if x != nil {
		return x.CarriageNumber
	}
	return ""
}

func (x *MyTicketInfo) GetSeatNumber() string {
	if x != nil {
		return x.SeatNumber
	}
	return ""
}

var File_ticket_ticket_service_proto protoreflect.FileDescriptor

var file_ticket_ticket_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x4c, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7a,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x0d, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x22, 0x71, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x07,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x70, 0x65, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x19, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x70, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x74, 0x6f, 0x70, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb6, 0x01,
	0x0a, 0x16, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x22, 0x7e, 0x0a, 0x17, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x02, 0x0a, 0x13, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa3, 0x04, 0x0a, 0x0a, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x79,
	0x73, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x64, 0x61, 0x79, 0x73, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x54, 0x61,
	0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x73, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0x31, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x22, 0x4a, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x15, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x1b, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65,
	0x6e, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x16, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x79, 0x0a, 0x12, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x6e, 0x12, 0x49, 0x0a, 0x12, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x12, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0xfb, 0x01, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x79,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xea, 0x02, 0x0a, 0x0c, 0x4d, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x32, 0x97, 0x07,
	0x0a, 0x0d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x8d, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x74, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x12, 0x8d, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x20, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x27, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x2f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x0c, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01,
	0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x12, 0x71, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x18, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01,
	0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x6d, 0x79,
	0x2d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x21, 0x5a, 0x1f, 0x2e, 0x2f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ticket_ticket_service_proto_rawDescOnce sync.Once
	file_ticket_ticket_service_proto_rawDescData = file_ticket_ticket_service_proto_rawDesc
)

func file_ticket_ticket_service_proto_rawDescGZIP() []byte {
	file_ticket_ticket_service_proto_rawDescOnce.Do(func() {
		file_ticket_ticket_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_ticket_ticket_service_proto_rawDescData)
	})
	return file_ticket_ticket_service_proto_rawDescData
}

var file_ticket_ticket_service_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_ticket_ticket_service_proto_goTypes = []any{
	(*ListRegionStationRequest)(nil),    // 0: ticket.ListRegionStationRequest
	(*ListRegionStationResponse)(nil),   // 1: ticket.ListRegionStationResponse
	(*RegionStation)(nil),               // 2: ticket.RegionStation
	(*ListAllStationResponse)(nil),      // 3: ticket.ListAllStationResponse
	(*Station)(nil),                     // 4: ticket.Station
	(*TrainStationQueryRequest)(nil),    // 5: ticket.TrainStationQueryRequest
	(*TrainStationQueryResponse)(nil),   // 6: ticket.TrainStationQueryResponse
	(*TrainStation)(nil),                // 7: ticket.TrainStation
	(*TicketPageQueryRequest)(nil),      // 8: ticket.TicketPageQueryRequest
	(*TicketPageQueryResponse)(nil),     // 9: ticket.TicketPageQueryResponse
	(*TicketPageQueryData)(nil),         // 10: ticket.TicketPageQueryData
	(*TicketInfo)(nil),                  // 11: ticket.TicketInfo
	(*SeatClassInfo)(nil),               // 12: ticket.SeatClassInfo
	(*CancelTicketRequest)(nil),         // 13: ticket.CancelTicketRequest
	(*CancelTicketResponse)(nil),        // 14: ticket.CancelTicketResponse
	(*PurchaseTicketRequest)(nil),       // 15: ticket.PurchaseTicketRequest
	(*PurchaseTicketPassengerInfo)(nil), // 16: ticket.PurchaseTicketPassengerInfo
	(*PurchaseTicketResponse)(nil),      // 17: ticket.PurchaseTicketResponse
	(*TicketPurchaseData)(nil),          // 18: ticket.TicketPurchaseData
	(*TicketOrderDetail)(nil),           // 19: ticket.TicketOrderDetail
	(*GetTicketRequest)(nil),            // 20: ticket.GetTicketRequest
	(*GetTicketResponse)(nil),           // 21: ticket.GetTicketResponse
	(*MyTicketInfo)(nil),                // 22: ticket.MyTicketInfo
	(*emptypb.Empty)(nil),               // 23: google.protobuf.Empty
}
var file_ticket_ticket_service_proto_depIdxs = []int32{
	2,  // 0: ticket.ListRegionStationResponse.data:type_name -> ticket.RegionStation
	4,  // 1: ticket.ListAllStationResponse.data:type_name -> ticket.Station
	7,  // 2: ticket.TrainStationQueryResponse.data:type_name -> ticket.TrainStation
	10, // 3: ticket.TicketPageQueryResponse.data:type_name -> ticket.TicketPageQueryData
	11, // 4: ticket.TicketPageQueryData.trainList:type_name -> ticket.TicketInfo
	12, // 5: ticket.TicketInfo.seatClassList:type_name -> ticket.SeatClassInfo
	16, // 6: ticket.PurchaseTicketRequest.passengers:type_name -> ticket.PurchaseTicketPassengerInfo
	18, // 7: ticket.PurchaseTicketResponse.data:type_name -> ticket.TicketPurchaseData
	19, // 8: ticket.TicketPurchaseData.ticketOrderDetails:type_name -> ticket.TicketOrderDetail
	22, // 9: ticket.GetTicketResponse.data:type_name -> ticket.MyTicketInfo
	0,  // 10: ticket.TicketService.ListRegionStation:input_type -> ticket.ListRegionStationRequest
	23, // 11: ticket.TicketService.ListAllStation:input_type -> google.protobuf.Empty
	5,  // 12: ticket.TicketService.ListTrainStationQuery:input_type -> ticket.TrainStationQueryRequest
	8,  // 13: ticket.TicketService.PageListTicketQuery:input_type -> ticket.TicketPageQueryRequest
	15, // 14: ticket.TicketService.PurchaseTickets:input_type -> ticket.PurchaseTicketRequest
	13, // 15: ticket.TicketService.CancelTicket:input_type -> ticket.CancelTicketRequest
	20, // 16: ticket.TicketService.GetTicket:input_type -> ticket.GetTicketRequest
	1,  // 17: ticket.TicketService.ListRegionStation:output_type -> ticket.ListRegionStationResponse
	3,  // 18: ticket.TicketService.ListAllStation:output_type -> ticket.ListAllStationResponse
	6,  // 19: ticket.TicketService.ListTrainStationQuery:output_type -> ticket.TrainStationQueryResponse
	9,  // 20: ticket.TicketService.PageListTicketQuery:output_type -> ticket.TicketPageQueryResponse
	17, // 21: ticket.TicketService.PurchaseTickets:output_type -> ticket.PurchaseTicketResponse
	14, // 22: ticket.TicketService.CancelTicket:output_type -> ticket.CancelTicketResponse
	21, // 23: ticket.TicketService.GetTicket:output_type -> ticket.GetTicketResponse
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_ticket_ticket_service_proto_init() }
func file_ticket_ticket_service_proto_init() {
	if File_ticket_ticket_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ticket_ticket_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ticket_ticket_service_proto_goTypes,
		DependencyIndexes: file_ticket_ticket_service_proto_depIdxs,
		MessageInfos:      file_ticket_ticket_service_proto_msgTypes,
	}.Build()
	File_ticket_ticket_service_proto = out.File
	file_ticket_ticket_service_proto_rawDesc = nil
	file_ticket_ticket_service_proto_goTypes = nil
	file_ticket_ticket_service_proto_depIdxs = nil
}
