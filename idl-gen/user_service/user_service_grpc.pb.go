// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: user/user_service.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_QueryUserByUsername_FullMethodName          = "/user.UserService/QueryUserByUsername"
	UserService_HasUsername_FullMethodName                  = "/user.UserService/HasUsername"
	UserService_Register_FullMethodName                     = "/user.UserService/Register"
	UserService_Update_FullMethodName                       = "/user.UserService/Update"
	UserService_Deletion_FullMethodName                     = "/user.UserService/Deletion"
	UserService_Login_FullMethodName                        = "/user.UserService/Login"
	UserService_CheckLogin_FullMethodName                   = "/user.UserService/CheckLogin"
	UserService_Logout_FullMethodName                       = "/user.UserService/Logout"
	UserService_ListPassengerQueryByUsername_FullMethodName = "/user.UserService/ListPassengerQueryByUsername"
	UserService_ListPassengerQueryByIds_FullMethodName      = "/user.UserService/ListPassengerQueryByIds"
	UserService_SavePassenger_FullMethodName                = "/user.UserService/SavePassenger"
	UserService_UpdatePassenger_FullMethodName              = "/user.UserService/UpdatePassenger"
	UserService_RemovePassenger_FullMethodName              = "/user.UserService/RemovePassenger"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户信息服务接口
type UserServiceClient interface {
	// 根据用户名查询用户信息
	QueryUserByUsername(ctx context.Context, in *QueryUserByUsernameReq, opts ...grpc.CallOption) (*QueryUserResp, error)
	// 检查用户名是否存在
	HasUsername(ctx context.Context, in *HasUsernameReq, opts ...grpc.CallOption) (*HasUsernameResp, error)
	// 用户注册
	Register(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)
	// 修改用户信息
	Update(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateResp, error)
	// 用户注销
	Deletion(ctx context.Context, in *UserDeletionReq, opts ...grpc.CallOption) (*DeletionResp, error)
	// 用户登录
	Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error)
	// 检查登录状态
	CheckLogin(ctx context.Context, in *CheckLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error)
	// 用户登出
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	// 根据用户名查询乘车人列表
	ListPassengerQueryByUsername(ctx context.Context, in *ListPassengerByUsernameReq, opts ...grpc.CallOption) (*ListPassengerByUsernameResp, error)
	// 根据乘车人 ID 集合查询乘车人列表
	ListPassengerQueryByIds(ctx context.Context, in *ListPassengerByIdsReq, opts ...grpc.CallOption) (*ListPassengerByIdsResp, error)
	// 新增乘车人
	SavePassenger(ctx context.Context, in *PassengerReq, opts ...grpc.CallOption) (*SavePassengerResp, error)
	// 修改乘车人
	UpdatePassenger(ctx context.Context, in *PassengerReq, opts ...grpc.CallOption) (*UpdatePassengerResp, error)
	// 移除乘车人
	RemovePassenger(ctx context.Context, in *RemovePassengerReq, opts ...grpc.CallOption) (*RemovePassengerResp, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) QueryUserByUsername(ctx context.Context, in *QueryUserByUsernameReq, opts ...grpc.CallOption) (*QueryUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUserResp)
	err := c.cc.Invoke(ctx, UserService_QueryUserByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) HasUsername(ctx context.Context, in *HasUsernameReq, opts ...grpc.CallOption) (*HasUsernameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasUsernameResp)
	err := c.cc.Invoke(ctx, UserService_HasUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Register(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRegisterResp)
	err := c.cc.Invoke(ctx, UserService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserUpdateResp)
	err := c.cc.Invoke(ctx, UserService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Deletion(ctx context.Context, in *UserDeletionReq, opts ...grpc.CallOption) (*DeletionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletionResp)
	err := c.cc.Invoke(ctx, UserService_Deletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResp)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckLogin(ctx context.Context, in *CheckLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResp)
	err := c.cc.Invoke(ctx, UserService_CheckLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, UserService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListPassengerQueryByUsername(ctx context.Context, in *ListPassengerByUsernameReq, opts ...grpc.CallOption) (*ListPassengerByUsernameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPassengerByUsernameResp)
	err := c.cc.Invoke(ctx, UserService_ListPassengerQueryByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListPassengerQueryByIds(ctx context.Context, in *ListPassengerByIdsReq, opts ...grpc.CallOption) (*ListPassengerByIdsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPassengerByIdsResp)
	err := c.cc.Invoke(ctx, UserService_ListPassengerQueryByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SavePassenger(ctx context.Context, in *PassengerReq, opts ...grpc.CallOption) (*SavePassengerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SavePassengerResp)
	err := c.cc.Invoke(ctx, UserService_SavePassenger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePassenger(ctx context.Context, in *PassengerReq, opts ...grpc.CallOption) (*UpdatePassengerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePassengerResp)
	err := c.cc.Invoke(ctx, UserService_UpdatePassenger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemovePassenger(ctx context.Context, in *RemovePassengerReq, opts ...grpc.CallOption) (*RemovePassengerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePassengerResp)
	err := c.cc.Invoke(ctx, UserService_RemovePassenger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// 用户信息服务接口
type UserServiceServer interface {
	// 根据用户名查询用户信息
	QueryUserByUsername(context.Context, *QueryUserByUsernameReq) (*QueryUserResp, error)
	// 检查用户名是否存在
	HasUsername(context.Context, *HasUsernameReq) (*HasUsernameResp, error)
	// 用户注册
	Register(context.Context, *UserRegisterReq) (*UserRegisterResp, error)
	// 修改用户信息
	Update(context.Context, *UserUpdateReq) (*UserUpdateResp, error)
	// 用户注销
	Deletion(context.Context, *UserDeletionReq) (*DeletionResp, error)
	// 用户登录
	Login(context.Context, *UserLoginReq) (*UserLoginResp, error)
	// 检查登录状态
	CheckLogin(context.Context, *CheckLoginReq) (*UserLoginResp, error)
	// 用户登出
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	// 根据用户名查询乘车人列表
	ListPassengerQueryByUsername(context.Context, *ListPassengerByUsernameReq) (*ListPassengerByUsernameResp, error)
	// 根据乘车人 ID 集合查询乘车人列表
	ListPassengerQueryByIds(context.Context, *ListPassengerByIdsReq) (*ListPassengerByIdsResp, error)
	// 新增乘车人
	SavePassenger(context.Context, *PassengerReq) (*SavePassengerResp, error)
	// 修改乘车人
	UpdatePassenger(context.Context, *PassengerReq) (*UpdatePassengerResp, error)
	// 移除乘车人
	RemovePassenger(context.Context, *RemovePassengerReq) (*RemovePassengerResp, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) QueryUserByUsername(context.Context, *QueryUserByUsernameReq) (*QueryUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserByUsername not implemented")
}
func (UnimplementedUserServiceServer) HasUsername(context.Context, *HasUsernameReq) (*HasUsernameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUsername not implemented")
}
func (UnimplementedUserServiceServer) Register(context.Context, *UserRegisterReq) (*UserRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) Update(context.Context, *UserUpdateReq) (*UserUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserServiceServer) Deletion(context.Context, *UserDeletionReq) (*DeletionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deletion not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *UserLoginReq) (*UserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) CheckLogin(context.Context, *CheckLoginReq) (*UserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLogin not implemented")
}
func (UnimplementedUserServiceServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserServiceServer) ListPassengerQueryByUsername(context.Context, *ListPassengerByUsernameReq) (*ListPassengerByUsernameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPassengerQueryByUsername not implemented")
}
func (UnimplementedUserServiceServer) ListPassengerQueryByIds(context.Context, *ListPassengerByIdsReq) (*ListPassengerByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPassengerQueryByIds not implemented")
}
func (UnimplementedUserServiceServer) SavePassenger(context.Context, *PassengerReq) (*SavePassengerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePassenger not implemented")
}
func (UnimplementedUserServiceServer) UpdatePassenger(context.Context, *PassengerReq) (*UpdatePassengerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassenger not implemented")
}
func (UnimplementedUserServiceServer) RemovePassenger(context.Context, *RemovePassengerReq) (*RemovePassengerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePassenger not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_QueryUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_QueryUserByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryUserByUsername(ctx, req.(*QueryUserByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_HasUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).HasUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_HasUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).HasUsername(ctx, req.(*HasUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*UserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Deletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeletionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Deletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Deletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Deletion(ctx, req.(*UserDeletionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*UserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CheckLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckLogin(ctx, req.(*CheckLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListPassengerQueryByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPassengerByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListPassengerQueryByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListPassengerQueryByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListPassengerQueryByUsername(ctx, req.(*ListPassengerByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListPassengerQueryByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPassengerByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListPassengerQueryByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListPassengerQueryByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListPassengerQueryByIds(ctx, req.(*ListPassengerByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SavePassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassengerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SavePassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SavePassenger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SavePassenger(ctx, req.(*PassengerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassengerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdatePassenger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePassenger(ctx, req.(*PassengerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemovePassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePassengerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemovePassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemovePassenger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemovePassenger(ctx, req.(*RemovePassengerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUserByUsername",
			Handler:    _UserService_QueryUserByUsername_Handler,
		},
		{
			MethodName: "HasUsername",
			Handler:    _UserService_HasUsername_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "Deletion",
			Handler:    _UserService_Deletion_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _UserService_CheckLogin_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserService_Logout_Handler,
		},
		{
			MethodName: "ListPassengerQueryByUsername",
			Handler:    _UserService_ListPassengerQueryByUsername_Handler,
		},
		{
			MethodName: "ListPassengerQueryByIds",
			Handler:    _UserService_ListPassengerQueryByIds_Handler,
		},
		{
			MethodName: "SavePassenger",
			Handler:    _UserService_SavePassenger_Handler,
		},
		{
			MethodName: "UpdatePassenger",
			Handler:    _UserService_UpdatePassenger_Handler,
		},
		{
			MethodName: "RemovePassenger",
			Handler:    _UserService_RemovePassenger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user_service.proto",
}
