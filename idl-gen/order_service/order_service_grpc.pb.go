// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: order/order_service.proto

package order_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderService_QueryTicketOrderByOrderSn_FullMethodName = "/order.OrderService/QueryTicketOrderByOrderSn"
	OrderService_PageTicketOrder_FullMethodName           = "/order.OrderService/PageTicketOrder"
	OrderService_PageSelfTicketOrder_FullMethodName       = "/order.OrderService/PageSelfTicketOrder"
	OrderService_CreateTicketOrder_FullMethodName         = "/order.OrderService/CreateTicketOrder"
	OrderService_CloseTickOrder_FullMethodName            = "/order.OrderService/CloseTickOrder"
	OrderService_CancelTickOrder_FullMethodName           = "/order.OrderService/CancelTickOrder"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	QueryTicketOrderByOrderSn(ctx context.Context, in *QueryTicketOrderByOrderSnRequest, opts ...grpc.CallOption) (*QueryTicketOrderByOrderSnResponse, error)
	PageTicketOrder(ctx context.Context, in *PageTicketOrderRequest, opts ...grpc.CallOption) (*PageTicketOrderResponse, error)
	PageSelfTicketOrder(ctx context.Context, in *PageSelfTicketOrderRequest, opts ...grpc.CallOption) (*PageSelfTicketOrderResponse, error)
	CreateTicketOrder(ctx context.Context, in *CreateTicketOrderRequest, opts ...grpc.CallOption) (*CreateTicketOrderResponse, error)
	CloseTickOrder(ctx context.Context, in *CloseTickOrderRequest, opts ...grpc.CallOption) (*CloseTickOrderResponse, error)
	CancelTickOrder(ctx context.Context, in *CancelTickOrderRequest, opts ...grpc.CallOption) (*CancelTickOrderResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) QueryTicketOrderByOrderSn(ctx context.Context, in *QueryTicketOrderByOrderSnRequest, opts ...grpc.CallOption) (*QueryTicketOrderByOrderSnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTicketOrderByOrderSnResponse)
	err := c.cc.Invoke(ctx, OrderService_QueryTicketOrderByOrderSn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) PageTicketOrder(ctx context.Context, in *PageTicketOrderRequest, opts ...grpc.CallOption) (*PageTicketOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageTicketOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_PageTicketOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) PageSelfTicketOrder(ctx context.Context, in *PageSelfTicketOrderRequest, opts ...grpc.CallOption) (*PageSelfTicketOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageSelfTicketOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_PageSelfTicketOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CreateTicketOrder(ctx context.Context, in *CreateTicketOrderRequest, opts ...grpc.CallOption) (*CreateTicketOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTicketOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CreateTicketOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CloseTickOrder(ctx context.Context, in *CloseTickOrderRequest, opts ...grpc.CallOption) (*CloseTickOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseTickOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CloseTickOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CancelTickOrder(ctx context.Context, in *CancelTickOrderRequest, opts ...grpc.CallOption) (*CancelTickOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTickOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CancelTickOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility.
type OrderServiceServer interface {
	QueryTicketOrderByOrderSn(context.Context, *QueryTicketOrderByOrderSnRequest) (*QueryTicketOrderByOrderSnResponse, error)
	PageTicketOrder(context.Context, *PageTicketOrderRequest) (*PageTicketOrderResponse, error)
	PageSelfTicketOrder(context.Context, *PageSelfTicketOrderRequest) (*PageSelfTicketOrderResponse, error)
	CreateTicketOrder(context.Context, *CreateTicketOrderRequest) (*CreateTicketOrderResponse, error)
	CloseTickOrder(context.Context, *CloseTickOrderRequest) (*CloseTickOrderResponse, error)
	CancelTickOrder(context.Context, *CancelTickOrderRequest) (*CancelTickOrderResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) QueryTicketOrderByOrderSn(context.Context, *QueryTicketOrderByOrderSnRequest) (*QueryTicketOrderByOrderSnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTicketOrderByOrderSn not implemented")
}
func (UnimplementedOrderServiceServer) PageTicketOrder(context.Context, *PageTicketOrderRequest) (*PageTicketOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageTicketOrder not implemented")
}
func (UnimplementedOrderServiceServer) PageSelfTicketOrder(context.Context, *PageSelfTicketOrderRequest) (*PageSelfTicketOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageSelfTicketOrder not implemented")
}
func (UnimplementedOrderServiceServer) CreateTicketOrder(context.Context, *CreateTicketOrderRequest) (*CreateTicketOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketOrder not implemented")
}
func (UnimplementedOrderServiceServer) CloseTickOrder(context.Context, *CloseTickOrderRequest) (*CloseTickOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTickOrder not implemented")
}
func (UnimplementedOrderServiceServer) CancelTickOrder(context.Context, *CancelTickOrderRequest) (*CancelTickOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTickOrder not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}
func (UnimplementedOrderServiceServer) testEmbeddedByValue()                      {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_QueryTicketOrderByOrderSn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTicketOrderByOrderSnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).QueryTicketOrderByOrderSn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_QueryTicketOrderByOrderSn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).QueryTicketOrderByOrderSn(ctx, req.(*QueryTicketOrderByOrderSnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_PageTicketOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageTicketOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).PageTicketOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_PageTicketOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).PageTicketOrder(ctx, req.(*PageTicketOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_PageSelfTicketOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageSelfTicketOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).PageSelfTicketOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_PageSelfTicketOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).PageSelfTicketOrder(ctx, req.(*PageSelfTicketOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CreateTicketOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateTicketOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateTicketOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateTicketOrder(ctx, req.(*CreateTicketOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CloseTickOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTickOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CloseTickOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CloseTickOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CloseTickOrder(ctx, req.(*CloseTickOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CancelTickOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTickOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CancelTickOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CancelTickOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CancelTickOrder(ctx, req.(*CancelTickOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryTicketOrderByOrderSn",
			Handler:    _OrderService_QueryTicketOrderByOrderSn_Handler,
		},
		{
			MethodName: "PageTicketOrder",
			Handler:    _OrderService_PageTicketOrder_Handler,
		},
		{
			MethodName: "PageSelfTicketOrder",
			Handler:    _OrderService_PageSelfTicketOrder_Handler,
		},
		{
			MethodName: "CreateTicketOrder",
			Handler:    _OrderService_CreateTicketOrder_Handler,
		},
		{
			MethodName: "CloseTickOrder",
			Handler:    _OrderService_CloseTickOrder_Handler,
		},
		{
			MethodName: "CancelTickOrder",
			Handler:    _OrderService_CancelTickOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order_service.proto",
}
