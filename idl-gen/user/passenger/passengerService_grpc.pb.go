// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: user/passengerService.proto

package passenger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PassengerService_ListPassengerQueryByUsername_FullMethodName = "/user.PassengerService/ListPassengerQueryByUsername"
	PassengerService_ListPassengerQueryByIds_FullMethodName      = "/user.PassengerService/ListPassengerQueryByIds"
	PassengerService_SavePassenger_FullMethodName                = "/user.PassengerService/SavePassenger"
	PassengerService_UpdatePassenger_FullMethodName              = "/user.PassengerService/UpdatePassenger"
	PassengerService_RemovePassenger_FullMethodName              = "/user.PassengerService/RemovePassenger"
)

// PassengerServiceClient is the client API for PassengerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 乘车人服务接口
type PassengerServiceClient interface {
	// 根据用户名查询乘车人列表
	ListPassengerQueryByUsername(ctx context.Context, in *ListPassengerByUsernameReq, opts ...grpc.CallOption) (*ListPassengerByUsernameResp, error)
	// 根据乘车人 ID 集合查询乘车人列表
	ListPassengerQueryByIds(ctx context.Context, in *ListPassengerByIdsReq, opts ...grpc.CallOption) (*ListPassengerByIdsResp, error)
	// 新增乘车人
	SavePassenger(ctx context.Context, in *SavePassengerReq, opts ...grpc.CallOption) (*SavePassengerResp, error)
	// 修改乘车人
	UpdatePassenger(ctx context.Context, in *UpdatePassengerReq, opts ...grpc.CallOption) (*UpdatePassengerResp, error)
	// 移除乘车人
	RemovePassenger(ctx context.Context, in *RemovePassengerReq, opts ...grpc.CallOption) (*RemovePassengerResp, error)
}

type passengerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPassengerServiceClient(cc grpc.ClientConnInterface) PassengerServiceClient {
	return &passengerServiceClient{cc}
}

func (c *passengerServiceClient) ListPassengerQueryByUsername(ctx context.Context, in *ListPassengerByUsernameReq, opts ...grpc.CallOption) (*ListPassengerByUsernameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPassengerByUsernameResp)
	err := c.cc.Invoke(ctx, PassengerService_ListPassengerQueryByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passengerServiceClient) ListPassengerQueryByIds(ctx context.Context, in *ListPassengerByIdsReq, opts ...grpc.CallOption) (*ListPassengerByIdsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPassengerByIdsResp)
	err := c.cc.Invoke(ctx, PassengerService_ListPassengerQueryByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passengerServiceClient) SavePassenger(ctx context.Context, in *SavePassengerReq, opts ...grpc.CallOption) (*SavePassengerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SavePassengerResp)
	err := c.cc.Invoke(ctx, PassengerService_SavePassenger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passengerServiceClient) UpdatePassenger(ctx context.Context, in *UpdatePassengerReq, opts ...grpc.CallOption) (*UpdatePassengerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePassengerResp)
	err := c.cc.Invoke(ctx, PassengerService_UpdatePassenger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passengerServiceClient) RemovePassenger(ctx context.Context, in *RemovePassengerReq, opts ...grpc.CallOption) (*RemovePassengerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePassengerResp)
	err := c.cc.Invoke(ctx, PassengerService_RemovePassenger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassengerServiceServer is the server API for PassengerService service.
// All implementations must embed UnimplementedPassengerServiceServer
// for forward compatibility.
//
// 乘车人服务接口
type PassengerServiceServer interface {
	// 根据用户名查询乘车人列表
	ListPassengerQueryByUsername(context.Context, *ListPassengerByUsernameReq) (*ListPassengerByUsernameResp, error)
	// 根据乘车人 ID 集合查询乘车人列表
	ListPassengerQueryByIds(context.Context, *ListPassengerByIdsReq) (*ListPassengerByIdsResp, error)
	// 新增乘车人
	SavePassenger(context.Context, *SavePassengerReq) (*SavePassengerResp, error)
	// 修改乘车人
	UpdatePassenger(context.Context, *UpdatePassengerReq) (*UpdatePassengerResp, error)
	// 移除乘车人
	RemovePassenger(context.Context, *RemovePassengerReq) (*RemovePassengerResp, error)
	mustEmbedUnimplementedPassengerServiceServer()
}

// UnimplementedPassengerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPassengerServiceServer struct{}

func (UnimplementedPassengerServiceServer) ListPassengerQueryByUsername(context.Context, *ListPassengerByUsernameReq) (*ListPassengerByUsernameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPassengerQueryByUsername not implemented")
}
func (UnimplementedPassengerServiceServer) ListPassengerQueryByIds(context.Context, *ListPassengerByIdsReq) (*ListPassengerByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPassengerQueryByIds not implemented")
}
func (UnimplementedPassengerServiceServer) SavePassenger(context.Context, *SavePassengerReq) (*SavePassengerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePassenger not implemented")
}
func (UnimplementedPassengerServiceServer) UpdatePassenger(context.Context, *UpdatePassengerReq) (*UpdatePassengerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassenger not implemented")
}
func (UnimplementedPassengerServiceServer) RemovePassenger(context.Context, *RemovePassengerReq) (*RemovePassengerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePassenger not implemented")
}
func (UnimplementedPassengerServiceServer) mustEmbedUnimplementedPassengerServiceServer() {}
func (UnimplementedPassengerServiceServer) testEmbeddedByValue()                          {}

// UnsafePassengerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassengerServiceServer will
// result in compilation errors.
type UnsafePassengerServiceServer interface {
	mustEmbedUnimplementedPassengerServiceServer()
}

func RegisterPassengerServiceServer(s grpc.ServiceRegistrar, srv PassengerServiceServer) {
	// If the following call pancis, it indicates UnimplementedPassengerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PassengerService_ServiceDesc, srv)
}

func _PassengerService_ListPassengerQueryByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPassengerByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassengerServiceServer).ListPassengerQueryByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassengerService_ListPassengerQueryByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassengerServiceServer).ListPassengerQueryByUsername(ctx, req.(*ListPassengerByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassengerService_ListPassengerQueryByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPassengerByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassengerServiceServer).ListPassengerQueryByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassengerService_ListPassengerQueryByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassengerServiceServer).ListPassengerQueryByIds(ctx, req.(*ListPassengerByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassengerService_SavePassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePassengerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassengerServiceServer).SavePassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassengerService_SavePassenger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassengerServiceServer).SavePassenger(ctx, req.(*SavePassengerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassengerService_UpdatePassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePassengerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassengerServiceServer).UpdatePassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassengerService_UpdatePassenger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassengerServiceServer).UpdatePassenger(ctx, req.(*UpdatePassengerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassengerService_RemovePassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePassengerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassengerServiceServer).RemovePassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassengerService_RemovePassenger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassengerServiceServer).RemovePassenger(ctx, req.(*RemovePassengerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PassengerService_ServiceDesc is the grpc.ServiceDesc for PassengerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassengerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.PassengerService",
	HandlerType: (*PassengerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPassengerQueryByUsername",
			Handler:    _PassengerService_ListPassengerQueryByUsername_Handler,
		},
		{
			MethodName: "ListPassengerQueryByIds",
			Handler:    _PassengerService_ListPassengerQueryByIds_Handler,
		},
		{
			MethodName: "SavePassenger",
			Handler:    _PassengerService_SavePassenger_Handler,
		},
		{
			MethodName: "UpdatePassenger",
			Handler:    _PassengerService_UpdatePassenger_Handler,
		},
		{
			MethodName: "RemovePassenger",
			Handler:    _PassengerService_RemovePassenger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/passengerService.proto",
}
